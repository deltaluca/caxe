To compile, requires hlex and hllr.

them simply invoke the makefile, making sure that $HLEX_ROOT and $HLLR_ROOT are correctly set up.

To execute caxe under windows, you will need to add lib/win to your PATH variable for POSIX threads.

--------------------------------------- SYNTAX

Syntax of caXe is an extension of haXe so all valid haXe code is valid caXe code.

caXe additionaly provides 3 symbolic macro types and an import statement extension.

Identifier concatenation is performed via the ` binary operator, this will only take effect if the result of the concatenation would be a valid identifier so:

a`b //replaced by ab
a`1 //replaced by a1
1`a //replaced by 1`a

--------------------------------------- IMPORT

In haXe as of writing there is no real way to do wildcard imports, caXe provides wildcard imports for all .cx files given as arguments. The syntax is:

$(import package);

which will recursively import all .cx files in the given package. Including:

$(import);

to import 'all' files visible to caxe.

--------------------------------------- MACROS

caxe has 3 macro types. mixin,expand,define.

A caxe mixin is roughly equivalent to a standard C-style macro, a call to a mixin with a set of arguments is replaced inline with it's expansion.

$(mixin add(a,b) a+b);
add(1,2); //replaced by 1+2;

An expand macro is equivalent to a mixin, except that rather than the call being replaced with the expansion it is simply removed, and the set of unique expansions throughout the execution of caxe replaces the macro at it's definition.

$(expand unique(x) trace(x););
unique(1)
unique(2)
unique(1)
unique(1)

replaced by:

trace(1);
trace(2);

NOTE: Order is not well define, and:

trace(2);
trace(1);

is also valid output here.

A define macro is syntactic sugar possible using a mixin together with an expand macro where the string concatenation of the arguments and the macro name replace the call.

$(define class Set(T) {
});

Set(Int); Set(Int); Set(Float);

replaced by:

class Set_Int {}
class Set_Float {}

Set_Int; Set_Int; Set_Float;

noting that:

$(mixin Set(T) genSet(T) Set_`T);
$(expand genSet(T) class Set_`T {
});

is an equivalent pair of macros functionally.

--------------------------------------- SCOPE

All caxe macros are scoped logically with {} and () together with some caxe specific scoping mechanisms explained later ${} and $().

A macro can be given one of 5 scope modifiers:
    - local  [default]
    - file   (macro visible to whole file)
    - global (macro visible to whole file, and the whole of whatever files imports this file)
    - object (macro visible to first logical scope: in normal usage this will correspond to whatever class you are in but beware that more complex use will not work this way)
    - method (macro visible to second logical scope: in normal usage this will correspond to whatever method you are in with same warning)


