//for c++ hllr

//must match order in .hlx
%token IDENT STRING REGEXP INTEGER FLOATER
%token MSCOPE MBRACK
%token LBRACE RBRACE LPAREN RPAREN COMMA
%token DOT SEMI ARROW SLASH DOLL
%token CONS
%token PACKAGE IMPORT DEFINE MIXIN EXPAND STR
%token GLOBAL FILE LOCAL OBJECT METHOD

%{
    #include <parser_obj.hpp>

    struct RMIXIN {
        /*Symbol*/int x;
        std::vector</*Symbol*/int> y;
        std::vector<ptr<State>> z;

        RMIXIN() {}
        RMIXIN(/*Symbol*/int x, const std::vector</*Symbol*/int>& y, const std::vector<ptr<State>>& z) {
            this->x = x;
            this->y = y;
            this->z = z;
        }
        RMIXIN(/*Symbol*/int x, const std::vector<ptr<State>>& z) {
            this->x = x;
            this->z = z;
        }

        Dynamic build(const MSCOPE& scope) {
            return StateMixin(dMacro(scope,x,y,z));
        }
    };

    #define States std::vector<ptr<State>>
%}

%entry file

%file %{ Dynamic %}
    : restex PACKAGE SEMI restex %{
        States& x = (States&)%0;
        States& y = (States&)%3;
        for(auto i = y.begin(); i!=y.end(); i++) x.push_back(*i);
        retval = Program("",x);
    %}
    | restex PACKAGE qname SEMI restex %{
        retval = Program((std::string&)%2,(States&)%4);
    %}
    | restex %{
        retval = Program("",(States&)%0);
    %}
;

%qname %{ Dynamic %}
    : qname DOT IDENT %{
        std::string& x = (std::string&)%0;
        x.append(".");
//        x.append((std::string)%2);
	x.append(GetSymbol(%2.cast<int>()));
        retval = %0;
    %}
    | IDENT %{
        retval = GetSymbol(%0.cast<int>());
    %}
;

%rest %{ Dynamic %}
    : rest state %{
        States& x = (States&)%0;
        x.push_back(ptr<State>(%1));
        retval = %0;
    %}
    | %{
        retval = States();
    %}
;

%restex %{ Dynamic %}
    : restex stateex %{
        States& x = (States&) %0;
        x.push_back(ptr<State>(%1));
        retval = %0;
    %}
    | %{
        retval = States();
    %}
;

%state %{ Dynamic %}
    : ERROR %{ retval = StateNoise((std::string&)%0); %}
    | IDENT %{ retval = StateSymbol(%0.cast<int>()); %}
    | CONS  %{ retval = StateCons(); %}
    | DOT   %{ retval = StateNoise("."); %}
    | SEMI  %{ retval = StateNoise(";"); %}
    | SLASH %{ retval = StateNoise("/"); %}
    | ARROW %{ retval = StateNoise("->"); %}

    | DOLL %{ retval = StateNoise("$"); %}
    | DOLL IDENT %{
        States list;
        list.push_back(ptr<State>(StateSymbol(%1.cast<int>())));
        retval = StateMBrack(dMScopeBrack(list));
    %}
    | DOLL STR LPAREN restex RPAREN %{
        retval = StateString(ptr<State>(new StateArgScope((States&)%3)));
    %}

    | STRING  %{ retval = StateDatum((std::string&)%0); %}
    | REGEXP  %{ retval = StateDatum((std::string&)%0); %}
    | INTEGER %{ retval = StateNumber((std::string&)%0); %}
    | FLOATER %{ retval = StateNumber((std::string&)%0); %}

    | IMPORT qname semi %{ retval = StateImport((std::string&)%1); %}

    | LBRACE restex RBRACE %{ retval = StateScope((States&)%1); %}
    | MSCOPE mscopeix ARROW restex RBRACE %{
        retval = StateMScope(dMScopeBrack((std::vector<MIdent>&)%1, (States&)%3));
    %}
    | MBRACK mscopeix ARROW restex RPAREN %{
        retval = StateMBrack(dMScopeBrack((std::vector<MIdent>&)%1, (States&)%3));
    %}

    | LOCAL  %{ retval = StateSymbol(GetSymbol("local")); %}
    | GLOBAL %{ retval = StateSymbol(GetSymbol("global")); %}
    | FILE   %{ retval = StateSymbol(GetSymbol("file")); %}
    | OBJECT %{ retval = StateSymbol(GetSymbol("object")); %}
    | METHOD %{ retval = StateSymbol(GetSymbol("method")); %}
    | MIXIN  %{ retval = StateSymbol(GetSymbol("mixin")); %}
    | DEFINE %{ retval = StateSymbol(GetSymbol("define")); %}
    | EXPAND %{ retval = StateSymbol(GetSymbol("expand")); %}
    | STR    %{ retval = StateSymbol(GetSymbol("str")); %}

    | LPAREN args RPAREN %{ retval = StateCall((States&)%1); %}
    | LPAREN RPAREN %{ retval = StateCall(); %}

    | mimport RPAREN semi %{ retval = StateMImport(dMImport("")); %}
    | mimport qname RPAREN semi %{ retval = StateMImport(dMImport((std::string&)%1)); %}

    | mdefine access pre LPAREN eargs RPAREN restex RPAREN semi %{
        States& pre = (States&) %2;
        ptr<State> x = pre.back(); pre.pop_back();
        int name = ptr<StateSymbol>(x)->data;
        retval = StateDefine(dMacro((MSCOPE&)%1,pre,name,(std::vector</*Symbol*/int>&)%4, (States&)%6));
    %}
    | mdefine pre LPAREN eargs RPAREN restex RPAREN semi %{
        States& pre = (States&) %1;
        ptr<State> x = pre.back(); pre.pop_back();
        int name = ptr<StateSymbol>(x)->data;
        retval = StateDefine(dMacro(sLocal,pre,name,(std::vector</*Symbol*/int>&)%3, (States&)%5));
    %}


    | MBRACK EXPAND access IDENT LPAREN eargs RPAREN restex RPAREN semi %{
        retval = StateExpand(dMacro((MSCOPE&)%2, %3.cast<int>(), (std::vector</*Symbol*/int>&)%5, (States&)%7));
    %}

    | MBRACK MIXIN access rmixin %{
        RMIXIN& x = (RMIXIN&)%3;
        retval = x.build((MSCOPE&)%2);
    %}
;

%stateex %{ Dynamic %}
    : state %{ retval = %0; %}
    | COMMA %{ retval = StateNoise(","); %}
;

%mimport %{ Dynamic %} : MBRACK IMPORT %{%};
%mdefine  %{ Dynamic %}: MBRACK DEFINE %{%};

%semi %{ Dynamic %} : SEMI %{%} | %{%} ;

%mscopeix %{ Dynamic %}
    : mscopeix COMMA mscopei %{
        std::vector<MIdent>& x = (std::vector<MIdent>&)%0;
        x.push_back((MIdent&)%2);
        retval = %0;
    %}
    | mscopei %{
        std::vector<MIdent> x;
        x.push_back((MIdent&)%0);
        retval = x;
    %}
    | %{ retval = std::vector<MIdent>(); %}
;

%mscopei %{ Dynamic %}
    : IDENT %{ retval = MIdent(%0.cast<int>(),0); %}
    | IDENT SLASH INTEGER %{
        retval = MIdent(%0.cast<int>(), atoi(((std::string&)%2).c_str()));
    %}
;

%args %{ Dynamic %}
    : %{ retval = States(); %}
    | args2 %{ retval = %0; %}
;

%args2 %{ Dynamic %}
    : args2 COMMA rest %{
        States& x = (States&) %0;
        x.push_back(ptr<State>(StateArgScope((States&)%2)));
        retval = %0;
    %}
    | rest %{
        States x;
        x.push_back(ptr<State>(StateArgScope((States&)%0)));
        retval = x;
    %}
;

%eargs %{ Dynamic %}
    : %{ retval = States(); %}
    | eargs2 %{ retval = %0; %}
;

%eargs2 %{ Dynamic %}
    : eargs2 COMMA IDENT %{
        std::vector<int>& x = (std::vector<int>&)%0;
        x.push_back(%2.cast<int>());
        retval = %0;
    %}
    | IDENT %{
        std::vector<int> x;
        x.push_back(%0.cast<int>());
        retval = x;
    %}
;

%access %{ Dynamic %}
    : %{ retval = sLocal; %}
    | LOCAL  %{ retval = sLocal;  %}
    | GLOBAL %{ retval = sGlobal; %}
    | FILE   %{ retval = sFile;   %}
    | OBJECT %{ retval = sObject; %}
    | METHOD %{ retval = sMethod; %}
;

%pre %{ Dynamic %}
    : IDENT %{
        States x;
        x.push_back(ptr<State>(StateSymbol(%0.cast<int>())));
        retval = x;
    %}
    | ERROR %{
        States x;
        x.push_back(ptr<State>(StateNoise((std::string&)%0)));
        retval = x;
    %}
    | pre ERROR %{
        States& x = (States&) %0;
        x.push_back(ptr<State>(StateNoise((std::string&)%1)));
        retval = %0;
    %}
    | pre IDENT %{
        States& x = (States&) %0;
        x.push_back(ptr<State>(StateSymbol(%1.cast<int>())));
        retval = %0;
    %}
;

%rmixin %{ Dynamic %}
    : IDENT LPAREN eargs RPAREN restex RPAREN semi %{
        retval = RMIXIN(%0.cast<int>(), (std::vector<int>&)%2, (States&)%4);
    %}
    | IDENT restex RPAREN semi %{
        retval = RMIXIN(%0.cast<int>(), (States&)%1);
    %}
;

