//for c++ hlex

%{
    #include <parser_obj.hpp>
	#include <token.hpp>
%}

NULL 10 : ~/((/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/)|(//.*)+|[ \n\r\t]+)+/~

-1 : ~/[a-zA-Z_][a-zA-Z_0-9]*/~                          := %{ retval = new Token(tIdent,GetSymbol(%)); %}
-1 : ~/("([^\\"\r\n]|\\.)*")|('([^\\'\r\n]|\\.)*')/~     := %{ retval = new Token(tString,%); %}
-1 : ~/~/([^\\/\r\n]|\\.)*/[igmsu]*/~                    := %{ retval = new Token(tRegExp,%); %}
-1 : ~/([0-9]+)|(0x[0-9a-fA-F]+)|([0-9]+[eE][0-9]+)/~    := %{ retval = new Token(tInteger,%); %}
-2 : ~/(([0-9]+)|([0-9]*\.[0-9]+))([eE][\+\-]?[0-9]+)?/~ := %{ retval = new Token(tFloater,%); %}

error := %{ retval = new Token(tNoise,%); %}

~/$\{/~ := %{ retval = new Token(tMScope); %}
~/$\(/~ := %{ retval = new Token(tMBrack); %}

~/\{/~   := %{ retval = new Token(tLBrace); %}
~/\}/~   := %{ retval = new Token(tRBrace); %}
~/\(/~   := %{ retval = new Token(tLParen); %}
~/\)/~   := %{ retval = new Token(tRParen); %}
~/,/~    := %{ retval = new Token(tComma);  %}
~/\./~   := %{ retval = new Token(tDot);    %}
~/;/~    := %{ retval = new Token(tSemi);   %}
~/\-\>/~ := %{ retval = new Token(tArrow);  %}
~/\//~   := %{ retval = new Token(tSlash);  %}
~/$/~    := %{ retval = new Token(tDollar); %}

~/`/~ := %{ retval = new Token(tCons); %}

~/package/~ := %{ retval = new Token(tPackage); %}
~/import/~  := %{ retval = new Token(tImport);  %}

~/define/~ := %{ retval = new Token(tDefine); %}
~/mixin/~  := %{ retval = new Token(tMixin);  %}
~/expand/~ := %{ retval = new Token(tExpand); %}
~/str/~    := %{ retval = new Token(tStr);    %}

~/global/~ := %{ retval = new Token(tGlobal); %}
~/file/~   := %{ retval = new Token(tFile);   %}
~/local/~  := %{ retval = new Token(tLocal);  %}
~/object/~ := %{ retval = new Token(tObject); %}
~/method/~ := %{ retval = new Token(tMethod); %}
